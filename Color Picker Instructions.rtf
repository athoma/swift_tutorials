{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red170\green13\blue145;\red255\green255\blue255;\red0\green0\blue0;
\red92\green38\blue153;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgenericrgb\c66500\c5200\c56900;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c0\c0\c0;
\csgenericrgb\c35900\c14900\c60100;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww17060\viewh7520\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Color Picker Tutorial\
\
1. Open up a new Single View application. \
2. In the StoryBoard, add a Picker View, and a label. You may place them wherever you\'92d like, but make sure that they are Horizontally aligned, and have a set Vertical Spacing between them. \
3. Use the Assistant Editor to link your Picker View and Label elements to your ViewController (make sure that they are inside the class, but outside any functions).\
4. Create a new Swift File, and inside it create a Struct called \'93Colors\'94 that has contains a String Constant \'93colorName\'94, and a UIColor Constant \'93backgroundColor\'94. Save the file, and return to your ViewController.\
5. Create a global variable called \'93colorsArray\'94, typecast it to be an array of \'93Colors\'94, and set it equal to an empty array. Create a function called \'93loadColors\'94 that returns nothing and takes in no parameters.\
6. Inside the loadColors function, add at least three colors to our colorsArray. Then initialize loadColors inside viewDidLoad.\
7. Now we have an array with all of our colors, but we still need to link them to our Picker View. For this, we will need to use some of the Picker View functions which can be found here: TKTK\
In this project we will need:\
\pard\tx593\pardeftab593\pardirnatural\partightenfactor0

\f1 \cf2 \cb3 func\cf4  numberOfComponents(in pickerView: \cf5 UIPickerView\cf4 ) -> \cf5 Int 
\f0 \cf6 to choose how many columns our Picker View has\

\f1 \cf2 func\cf4  pickerView(\cf2 _\cf4  pickerView: \cf5 UIPickerView\cf4 , numberOfRowsInComponent component: \cf5 Int\cf4 ) -> \cf5 Int\cf4  \{ 
\f0 to choose how many rows our Picker View has\cf6 \

\f1 \cf2 func\cf4  pickerView(\cf2 _\cf4  pickerView: \cf5 UIPickerView\cf4 , titleForRow row: \cf5 Int\cf4 , forComponent component: \cf5 Int\cf4 ) -> \cf5 String\cf4 ? 
\f0 so that we can rename each row of the Picker View\

\f1 \cf2 func\cf4  pickerView(\cf2 _\cf4  pickerView: \cf5 UIPickerView\cf4 , didSelectRow row: \cf5 Int\cf4 , inComponent component: \cf5 Int\cf4 ) 
\f0 so that we can control what happens if a specific row is selected\
8. For now, we only want one column in our Picker View, so have numberOfComponents return 1.\
9. Inside numberOfRowsInComponent, return the number of elements that we have in our colorsArray without using an actual number.\
10. Inside titleForRow, we are going to use the \'93row: Int\'94 property to return each of our colorNames. So just as you would select a specific element of your array with an integer, use \'93row\'94 in place of that integer to return all of the colorNames in our colorsArray.\
11. In didSelectRow, use that same \'93row: Int\'94 property to change the color of our background when selected (you may need to look up how to change the background color). Also change the text of our label to equal the colorName of whatever color is selected.\
12. In viewDidLoad, set the delegate and dataSource of the Picker View to \'93self\'94. Then preload the color of the background to equal the first color in our array, as well as the text in the label. \
}